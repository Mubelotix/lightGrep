options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(AnalyseurSyntaxique)
package fr.insarouen.iti.compilation.lightgrep.analyseurs;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import fr.insarouen.iti.compilation.lightgrep.automate.Lettre;
import fr.insarouen.iti.compilation.lightgrep.automate.LettreException;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ExpressionRationnelle;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ExpressionRationnelleElementaire;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ZeroAN;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ZeroOuUn;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.UnAN;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.Concatenation;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.Union;


public class AnalyseurSyntaxique {
}

PARSER_END(AnalyseurSyntaxique)


TOKEN : {
    <CARACTERE_ECHAPE:"\\|" | "\\$" | "\\(" | "\\)" | "\\[" | "\\]" | "\\*" | "\\?" | "\\." | "\\-" | "\\$">
    | <OU:"|">
    | <PARAG:"(">
    | <PARAD:")">
    | <CROCHETG:"[">
    | <CROCHETD:"]">
    | <ZERO_N:"*">
    | <ZERO_UN:"?">
    | <UN_N:"+">
    | <JOKER:".">
    | <TIRET:"-">
    | <CIRCONFLEXE:"^">
    | <FIN_DE_LIGNE:"$">
    | <CARACTERE:["a"-"z","A"-"Z","0"-"9","!","\"","#","%","&",",","/",":",";",
            "<","=",">","?","@","^","_","`","{","|","}","~"]>
}

ExpressionRationnelle expressionRationnelle() throws LettreException :
// @u:start expressionRationnelle

{ExpressionRationnelle res=null;}{{return res;}}

// @u:end expressionRationnelle

ExpressionRationnelle expressionsRationnellesConcatenees()  throws LettreException :
// @u:start expressionRationnellesConcatenees

{ExpressionRationnelle res=null;}{{return res;}}

// @u:end expressionRationnellesConcatenees

ExpressionRationnelle expressionRationnelleBasique() throws LettreException :
// @u:start expressionRationnelleBasique

{ExpressionRationnelle res=null;}{{return res;}}

// @u:end expressionRationnelleBasique

ExpressionRationnelle expressionRationnelleElementaire() throws LettreException :
// @u:start expressionRationnelleElementaire

{ExpressionRationnelle res=null; Lettre l=null; Set<Lettre> ensemble=null;}
{
    <PARAG> res = expressionRationnelle() <PARAD>
    |
    l = lettre()
    {
        res = new ExpressionRationnelleElementaire(l);
    }
    |
    <JOKER>
    {
        res = new ExpressionRationnelleElementaire(Lettre.toutesLesLettresPossibles());
    }
    <CROCHETG>
    (
        ensemble = ensembleDeLettres() <CROCHETD> { res = new ExpressionRationnelleElementaire(ensemble); }
        |
        <CIRCONFLEXE> ensemble = ensembleDeLettres() <CROCHETD> { res = new ExpressionRationnelleElementaire(Lettre.lettresComplementaires(ensemble)); }
    )
    {return res;}
}

// @u:end expressionRationnelleElementaire

Set<Lettre> ensembleDeLettres() throws LettreException :
// @u:start ensembleDeLettres

{Set<Lettre> res=new HashSet<>(); Set<Lettre> inner=null;}
{
    (inner=elementsEnsembleDeLettres()
        {res.addAll(inner);}
    )*
    {return res;}
}

// @u:end ensembleDeLettres

Set<Lettre> elementsEnsembleDeLettres() throws LettreException :
// @u:start elementsEnsembleDeLettres

{Set<Lettre> res=null; Lettre l1=null; Lettre l2=null;}
{
    l1 = lettre()
    (
        "-" l2 = lettre()
        {
            res = Lettre.toutesLesLettresComprisesEntre(l1, l2);
            return res;
        }
        |
        {
            res = new HashSet<>();
            res.add(l1);
            return res;
        }
    )
}

// @u:end elementsEnsembleDeLettres

Lettre lettre() :
// @u:start lettre

{Token t;} {
    t = <CARACTERE>
    { return new Lettre(t.image.charAt(0)); }
    |
    t = <CARACTERE_ECHAPE>
    { return new Lettre(t.image.charAt(1)); }
}

// @u:end lettre
